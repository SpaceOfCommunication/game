/* eslint-disable @typescript-eslint/camelcase */
import { Button, TextField } from '@material-ui/core';
import { useStore } from '../../../core/store';
import React, { FC, useCallback, useEffect, useState } from 'react';
import Message from '../ui/message';
import { DocModel } from '../../../core/interfaces';
import { DEFAULT_MELODY_DURATION } from '../../../core/constants';
import GameConstructorEntry from '../game-contructor-entry/game-contructor-entry';
import AddIcon from '@material-ui/icons/Add';
import SaveIcon from '@material-ui/icons/Save';
import { useHistory, useParams } from 'react-router-dom';
import { useGameConstructorStyles } from './game-constructor.styles';
import { observer } from 'mobx-react-lite';
import { MessageService } from '../../../core/message-service';

export interface GameConstructorRouterParams {
  id?: string;
}

interface GameScreenModelDraft {
  picture?: Blob;
  audio?: Blob
}

function isValidScreen(screen: GameScreenModelDraft) {
  return screen.picture && screen.audio;
}

const DEFAULT_TITLE = '–ú–æ—è –Ω–æ–≤–∞—è –∏–≥—Ä–∞';

export const GameConstructor: FC = observer(() => {
  const store = useStore();
  const { id } = useParams<GameConstructorRouterParams>();
  const history = useHistory();
  const componentClasses = useGameConstructorStyles();
  const [screensState, setScreensState] = useState<GameScreenModelDraft[]>([{}]);
  const [showValidationState, setShowValidationState] = useState(false);
  const [melodyDuration, setMelodyDuration] = useState(DEFAULT_MELODY_DURATION);
  const [gameTitle, setGameTitle] = useState<string>(DEFAULT_TITLE);
  const [formDisabled, setFormDisabled] = useState<boolean>(false);
  const game = id ? store.games.find((game) => game.id === id) : undefined;

  useEffect(() => {
    setScreensState(game?.screens ? [...game?.screens] : []);
    setGameTitle(game?.title || DEFAULT_TITLE);
    setMelodyDuration(game?.audioDuration || DEFAULT_MELODY_DURATION);
    setFormDisabled(!game?.screens.length);
  }, [setScreensState, game]);

  const handleEntryAdd = useCallback(() => {
    setScreensState([...screensState, {}]);
    setFormDisabled(false);
  }, [screensState, setScreensState]);

  const handleEntryChange = useCallback((screen: GameScreenModelDraft, picture?: Blob, audio?: Blob) => {
    screen.picture = picture;
    screen.audio = audio;
    setScreensState([...screensState]);
  }, [screensState]);

  const handleEntryDelete = useCallback((screen: GameScreenModelDraft) => {
    const newScreenState = [...screensState.filter((ss) => ss !== screen)];
    setScreensState(newScreenState);
    if (newScreenState.length === 0) {
      setFormDisabled(true);
    }
  }, [screensState]);

  const handleSave = useCallback(async () => {
    if (screensState.length === 0) {
      MessageService.getInstance().showMessage({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', status: 'error' });
    }
    const hasEmptyFields = screensState.some((screen) => !isValidScreen(screen));
    if (hasEmptyFields) {
      MessageService.getInstance().showMessage({ message: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', status: 'error' });
      setShowValidationState(true);
      return;
    }

    const _attachments: DocModel["_attachments"] = {};
    screensState.forEach((screen, i) => {
      const picture = screen.picture as Blob;
      const audio = screen.audio as Blob;
      _attachments[`img-${i}`] = {
        content_type: picture.type,
        data: picture
      };
      _attachments[`sfx-${i}`] = {
        content_type: audio.type,
        data: audio
      };
    });
    const docModel: DocModel = { title: gameTitle, audioDuration: melodyDuration, _attachments };
    try {
      if (game) {
        await store.db.pouchDB.put<DocModel>({ _id: game.id, _rev: game.rev, ...docModel }, { force: true });
      } else {
        await store.db.pouchDB.post<DocModel>(docModel);
      }
      MessageService.getInstance().showMessage({ message: `–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ ${game ? '—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞' : '—Å–æ–∑–¥–∞–Ω–∞'}`, status: 'success' });
    } catch (err) {
      MessageService.getInstance().showMessage({ message: '–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', status: 'error' });
    }
    history.push('/')
  }, [screensState, setShowValidationState, store.db.pouchDB, history, gameTitle, melodyDuration, game]);

  return (
    <div className={componentClasses.wrapper}>
      <div className={componentClasses.header}>
        <h1>{game ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É' : '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã'}</h1>
      </div>
      <Message>–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Message>
      <div className={componentClasses.textInputBlock}>
        <TextField className={componentClasses.textInput} value={gameTitle}
          onChange={e => setGameTitle(e.target.value)} label="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã" variant="outlined" />
        <TextField className={componentClasses.textInput} type="number" value={melodyDuration} InputLabelProps={{ shrink: true }}
          onChange={e => setMelodyDuration(+e.target.value)} label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–ª–æ–¥–∏–∏ (—Å–µ–∫—É–Ω–¥—ã)" variant="outlined" />
      </div>
      <Message>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg –∏–ª–∏ png <span role="img" aria-label="–∏–∫–æ–Ω–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏">üñº </span>
        –∏ –º–µ–ª–æ–¥–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ mp3 –∏–ª–∏ ogg <span role="img" aria-label="–∏–∫–æ–Ω–∫–∞ –º–µ–ª–æ–¥–∏–∏">üé∂</span></Message>
      <Message>–í –æ–¥–Ω—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∞+–º–µ–ª–æ–¥–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω‚Äù —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –º–µ–ª–æ–¥–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è.</Message>
      <Message>–ö–æ–≥–¥–∞ –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É".</Message>
      <div className={componentClasses.screnWrapper}>
        {screensState.map((screen, i) => (
          <GameConstructorEntry
            onEntryChange={handleEntryChange.bind(undefined, screen)}
            onDelete={handleEntryDelete.bind(undefined, screen)}
            highlightEmpty={showValidationState && !isValidScreen(screen)}
            {...screen}>
          </GameConstructorEntry>
        ))}
      </div>
      <div className={componentClasses.buttons}>
        <Button onClick={handleEntryAdd} variant="contained" color="primary" size="large" startIcon={<AddIcon />}>
          –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π —ç–∫—Ä–∞–Ω
        </Button>
        <Button onClick={handleSave} disabled={formDisabled} variant="contained" color="secondary" size="large" startIcon={<SaveIcon />}>
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É
        </Button>
      </div>
    </div>
  )
});

export default GameConstructor